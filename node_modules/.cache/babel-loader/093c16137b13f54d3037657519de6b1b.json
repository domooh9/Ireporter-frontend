{"ast":null,"code":"// import { ResponsiveLine } from \"@nivo/line\";\n// import { useTheme } from \"@mui/material\";\n// import { tokens } from \"../theme\";\n// import { mockLineData as data } from \"../data/mockData\";\n// const LineChart = ({ isCustomLineColors = false, isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n//   return (\n//     <ResponsiveLine\n//       data={data}\n//       theme={{\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//         tooltip: {\n//           container: {\n//             color: colors.primary[500],\n//           },\n//         },\n//       }}\n//       colors={isDashboard ? { datum: \"color\" } : { scheme: \"nivo\" }} // added\n//       margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n//       xScale={{ type: \"point\" }}\n//       yScale={{\n//         type: \"linear\",\n//         min: \"auto\",\n//         max: \"auto\",\n//         stacked: true,\n//         reverse: false,\n//       }}\n//       yFormat=\" >-.2f\"\n//       curve=\"catmullRom\"\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         orient: \"bottom\",\n//         tickSize: 0,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"transportation\", // added\n//         legendOffset: 36,\n//         legendPosition: \"middle\",\n//       }}\n//       axisLeft={{\n//         orient: \"left\",\n//         tickValues: 5, // added\n//         tickSize: 3,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"count\", // added\n//         legendOffset: -40,\n//         legendPosition: \"middle\",\n//       }}\n//       enableGridX={false}\n//       enableGridY={false}\n//       pointSize={8}\n//       pointColor={{ theme: \"background\" }}\n//       pointBorderWidth={2}\n//       pointBorderColor={{ from: \"serieColor\" }}\n//       pointLabelYOffset={-12}\n//       useMesh={true}\n//       legends={[\n//         {\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 100,\n//           translateY: 0,\n//           itemsSpacing: 0,\n//           itemDirection: \"left-to-right\",\n//           itemWidth: 80,\n//           itemHeight: 20,\n//           itemOpacity: 0.75,\n//           symbolSize: 12,\n//           symbolShape: \"circle\",\n//           symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemBackground: \"rgba(0, 0, 0, .03)\",\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//     />\n//   );\n// };\n// export default LineChart;","map":{"version":3,"names":[],"sources":["/home/dom/react-admin-dashboard/src/components/LineChart.jsx"],"sourcesContent":["// import { ResponsiveLine } from \"@nivo/line\";\n// import { useTheme } from \"@mui/material\";\n// import { tokens } from \"../theme\";\n// import { mockLineData as data } from \"../data/mockData\";\n\n// const LineChart = ({ isCustomLineColors = false, isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n\n//   return (\n//     <ResponsiveLine\n//       data={data}\n//       theme={{\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//         tooltip: {\n//           container: {\n//             color: colors.primary[500],\n//           },\n//         },\n//       }}\n//       colors={isDashboard ? { datum: \"color\" } : { scheme: \"nivo\" }} // added\n//       margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n//       xScale={{ type: \"point\" }}\n//       yScale={{\n//         type: \"linear\",\n//         min: \"auto\",\n//         max: \"auto\",\n//         stacked: true,\n//         reverse: false,\n//       }}\n//       yFormat=\" >-.2f\"\n//       curve=\"catmullRom\"\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         orient: \"bottom\",\n//         tickSize: 0,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"transportation\", // added\n//         legendOffset: 36,\n//         legendPosition: \"middle\",\n//       }}\n//       axisLeft={{\n//         orient: \"left\",\n//         tickValues: 5, // added\n//         tickSize: 3,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"count\", // added\n//         legendOffset: -40,\n//         legendPosition: \"middle\",\n//       }}\n//       enableGridX={false}\n//       enableGridY={false}\n//       pointSize={8}\n//       pointColor={{ theme: \"background\" }}\n//       pointBorderWidth={2}\n//       pointBorderColor={{ from: \"serieColor\" }}\n//       pointLabelYOffset={-12}\n//       useMesh={true}\n//       legends={[\n//         {\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 100,\n//           translateY: 0,\n//           itemsSpacing: 0,\n//           itemDirection: \"left-to-right\",\n//           itemWidth: 80,\n//           itemHeight: 20,\n//           itemOpacity: 0.75,\n//           symbolSize: 12,\n//           symbolShape: \"circle\",\n//           symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemBackground: \"rgba(0, 0, 0, .03)\",\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//     />\n//   );\n// };\n\n// export default LineChart;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}